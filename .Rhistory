fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
fit1
fit2
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
fit1
fit2
summary(fit1)
summary(fit2)
compare(fit1,fit2)
compare <- anova(fit1,fit2)
compare
fit5<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(fit)
library("swirl")
swirl()
lm(Fertility ~ .,data="swiss")
lm(Fertility ~ .,data=swiss)
all<-lm(Fertility~.,data=swiss)
summary(all)
summary(lm(Fertility~Agriculture,data=swiss))
cor(Education,Examination)
cor(swiss$Education,swiss$Examination)
cor(swiss$Education,swiss$Agriculture)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms()
ec<-swiss$Examination +swiss$Catholic
efit<-lm(Fertility~.+ec,data=swiss)
all$coef-efit$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
B
sB
summary(InsectSpray[,2])
summary(InsectSprays[,2])
sapply()
a
sapply(InsectSprays,class)
fit<-lm(InsectSprays$count~InsectSprays$spray)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(InsectSprays$count~InsectSprays-1$spray)
nfit<-lm(InsectSprays$count~InsectSprays$spray-1)
nfit$coefficients
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,C)
a
spray2 <- relevel(InsectSprays$spray,"C")
fit2<-lm(InsectSprays$count~InsectSprays$spray)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunber)
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)
summary(fit)$coef
lmf<-lm(Numeric~Year)
a
lmF <-
| lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmF <-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*year,hunger)
lmInter<-lm(Numeric~Year+Sex+int(Sex*year),hunger)
a
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
a
dim(hunger)
948
names(hunber)
names(hunger)
a
fit <- lm(hunger$Numeric ~
| hunger$Year)
fit <- lm(hunger$Numeric ~hunger$Year)
fit$coef
summary(fit)$coef
a
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
a
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
a
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
?boxplot
?shuttle
library(MASS)
data(shuttle)
head(shuttle)
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
head(shuttle)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
windhead
fit1$coef
fit1$coefficients
fit1$coef[1]/fit1$coef[2]
exp(windtail)/exp(windhead)
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
fit2$coef
exp(-3.635093e-01)/exp(-3.955180e-01)
exp(fit2$coef[1])/exp(fit2$coef[2])
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
windhead2
windtail2
exp(fit2$coef[1])/exp(fit2$coef[2])
exp(fit2$coef[2])/exp(fit2$coef[1])
exp(fit1$coef[1])/exp(fit1$coef[2])
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
head(InsectSpraysÃ§)
head(InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
fit$coef
fit$coef[1]/fit$coef[2]
summary(fit)
exp(fit$coef[1])/exp(fit$coef[2])
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl+log(10))+wt,data = mtcars)
summary(fit2)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
y
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
lines(x, py)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
summary(gb)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
plot.new
plot.new()
lines(x, py)
summary(gb)
plot(y~x)
swirl()
library("swirl")
David
swirl()
simbias()
x1<-simbias()
x1c <- simbias()
View(`x1`)
apply(x1c, 1, mean)
1
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education,Swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
1
View(ravenData)
mdl<-glm(ravenWinNum ~ ravenScore,ravenData)
1
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial,
| data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial,data=ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hit[,'visits'])
which.max(hits[,'visits'])
hits[704m]
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-1
swirl()
1
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,
| offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
for (i in 1:2) print(i%%2==0)
?%%
i%%2
i
1%%1
1%%2
%%
0%%2
a%%a
5%%5
1%%2
0%%2
3%%2
4%%2
5%%2
6%%2
8%%2
?'%%'
1%%2
7%%2
2%%7
install.packages('devtools')
install.packages('Rtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('RCurl')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='davidcanoriesgo', token='ED224B0EC09D14856A89DE5EAEDD717D', secret='AYekvcbLbcEme0QYx4zVhHPDc/KZRWAlF1ql1oRg')
desployApp()
deployApp()
deployApp()
getwd()
setwd("../RStudio/www")
setwd("C:/Users/u531005/Documents/RStudio/www")
deployApp()
setwd("C:/Users/u531005/Documents/RStudio")
deployApp()
setwd("C:/Users/u531005/Documents")
deployApp()
data(cars)
cars
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
data("airquality")
install.packages("rCharts")
install.packages("rCharts")
data("airquality")
airquality
library(rCharts)
install.packages("rCharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("rCharts")
install_github('ramnathv/rCharts')
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
head(airquality)
dTable(airquality, sPaginationType = "full_numbers"
)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testIndex)
rm(testing)
rm(ttestIndex)
rm(testIndex)
rm(trainIndex)
rm(training)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
View(training)
View(airquality)
View(airquality)
rm(testIndex)
rm(testing)
rm(training)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
intall.packages("Hmisc")
install.packages("Hmisc")
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
install.packages("dplyr")
install.packages("gridExtra")
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Superplasticizer, g=breaks))
View(concrete)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
ss <- training[,grep('^IL', x = names(training))]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc$rotation
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
View(df)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
modelFit
View(testing)
modelFitResult <- cconfusionMatrix(testing[,1],predict(modelFit,testing[,1]))
modelFitResult <- confusionMatrix(testing[,1],predict(modelFit,testing[,1]))
View(testing)
modelFitResult <- confusionMatrix(testing[,13],predict(modelFit,testing[,13]))
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc
preProc$rotation
ss <- training[,grep('^IL', x = names(training))]
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
preProc
preProc$rotation
confusionMatrix(testing$diagnosis,predict(preProc,testing))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training))]
sstesting <- training[,grep('^IL', x = names(testing))]
pcafit <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
pcaconfusion <- confusionMatrix(sstesting$diagnosis,predict(pcafit, sstesting)
)
glmFit <- train(diagnosis ~ ., method = "glm", data = ss)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
IL_col_idx
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
glmFit <- train(diagnosis ~ ., data=new_training, method="glm")
glmconfusion <- confusionMatrix(new_testing[, 13], predict(glmFit , new_testing[, -13]))
glmconfusion
pcafit <- train(diagnosis ~ ., method = "glm", preProcess = "pca", data = new_training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
pcaconfusion <- confusionMatrix(new_testing[,13], predict(pcaFit, new_testing[, -13]))
pcaconfusion <- confusionMatrix(new_testing[,13], predict(pcafit, new_testing[, -13]))
pcaconfusion
library(shiny)
runApp()
getwd()
setwd("C:/Users/u531005/Documents/DataProducts")
runApp()
runApp()
colnames(diamonds)
details(diamonds)
summary(diamonds)
head(diamonds)
runApp()
runApp()
runApp()
library(shinyapps)
shinyapps::setAccountInfo(name='davidcanoriesgo', token='ED224B0EC09D14856A89DE5EAEDD717D', secret='AYekvcbLbcEme0QYx4zVhHPDc/KZRWAlF1ql1oRg')
deployApp()
getwd()
deployApp()
date: `r date()`
carat <- 2.2
